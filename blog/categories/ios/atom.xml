<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Nikola Zdravevski's Blog]]></title>
  <link href="http://nzdravevski.github.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://nzdravevski.github.com/"/>
  <updated>2012-10-31T21:48:08+01:00</updated>
  <id>http://nzdravevski.github.com/</id>
  <author>
    <name><![CDATA[Nikola Zdravevski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UX Wins in the foursquare iOS app]]></title>
    <link href="http://nzdravevski.github.com/blog/2012/10/30/ux-wins-in-the-foursquare-ios-app/"/>
    <updated>2012-10-30T23:20:00+01:00</updated>
    <id>http://nzdravevski.github.com/blog/2012/10/30/ux-wins-in-the-foursquare-ios-app</id>
    <content type="html"><![CDATA[<p>The more I get into the iOS development the more I see how other fellow developers and/or designers don't care at all about the <em>UX</em> (user experience) and user interface elements they use. I feel that not enough attention is paid on the visual <em>beauty</em> of the app. So we have all this apps that look-alike or apps that try to be original, but in some, for me wrong ways.</p>

<p>However, of course there are exceptions out there and apps that is pleasure to look at. One of them for me is the new <code>foursquare</code> iOS app, or foursquare version 5.x. I really like the subtle, simple and minimal, yet very cool and good looking details that make you love this app.</p>

<p>Following here are some of the distinctive UX features I have found throughout the foursquare app. <!-- more --></p>

<h2>1. UIImageView Background Image</h2>

<p><img class="center" src="/images/posts_images/checkinphoto.PNG" width="640" height="608" title="UIImageViewBackgroundImage" >
If the user has added a photo to her check in, this photo is shown on the feed as a horizontally scrollable image that hides a girl with a camera in the background.</p>

<h2>2. Unique Pull To Refresh Design</h2>

<p><img class="center" src="/images/posts_images/pulltorefresh.PNG" width="640" height="466" title="PullToRefreshDesign" >
We all know the default/Tweetie-like <code>Pull To Refresh</code> control that is used widely across iOS apps and that only features text, a direction changing arrow i.e. nothing original and has even become boring nowadays. Exception is the Apple implementation of its very own Pull To Refresh mechanism that can be found in the stock Mail app under iOS 6 and foursquare's Pull To Refresh control. They really did a great job here simply by providing a crown image that is shown only if the user kind of overscrolls the refresh control. Fells good when that mayor crown shows up all of a sudden and totally unexpected.</p>

<p>On this picture one can also notice the great rounded edges on the <code>UINavigationBar</code>'s top corners (just below the status bar). I totally like this design.</p>

<h2>3. Custom UISwitch</h2>

<p><img class="center" src="/images/posts_images/switch.PNG" width="640" height="383" title="CustomUISwitch" >
This is by far my favorite social network sharing switch. I love it because of its minimal and pure perfection. When the user turns a switch <em>on</em> it instantly becomes more vivid simply by tinting itself in the color associated with the social network the switch represents.</p>

<h2>4. UITabBarItem Title</h2>

<p><img class="center" src="/images/posts_images/tabbaritemname.PNG" width="218" height="101" title="UITabBarItemTitle" >
<code>UITabBarItem</code> names are really important aspect of the app design and should be chosen <strong>very</strong> carefully and wisely because they will be shown at all times the user is using the application. That said, foursquare has chosen a great and original way of naming their user account tab bar item and instead of boring and traditional names like <em>Profile</em>, <em>Account</em> or <em>User</em> they have named their tab bar item after the user's first name. Cool and very user friendly.</p>

<h2>5. Venue Likes</h2>

<p><img class="center" src="/images/posts_images/venuelike.PNG" width="640" height="242" title="VenueLikes" >
If the user has liked a venue and is now checked it at that venue, a little heart shows in the bottom right corner of her/his profile picture revealing that user's appreciation of the specific venue.</p>

<hr />

<p>In a conclusion, foursquare is a great app with an awesome, beautiful and user oriented design. I use it regularly both for checking in and for inspirational iOS app design ideas.</p>

<p>Thanks for reading this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINavigationController Back Button Custom Action (Quick Tip)]]></title>
    <link href="http://nzdravevski.github.com/blog/2012/07/23/uinavigationcontroller-back-button-custom-action-quick-tip/"/>
    <updated>2012-07-23T19:12:00+02:00</updated>
    <id>http://nzdravevski.github.com/blog/2012/07/23/uinavigationcontroller-back-button-custom-action-quick-tip</id>
    <content type="html"><![CDATA[<p>We all know the good, old <code>UINavigationController</code> that is used in almost every iOS application. <code>UINavigationController</code> has a default action when back button is pressed on one of its stack's view controllers i.e. - go back one level in the navigation stack. However, there are cases when we need to do something extra when back button is pressed. <!-- more --> For example - <em>and this is just an example usage</em>, if we want to mimic combo box - like control in iOS (which is usually implemented via single, right detail <code>UITableViewCell</code> in the parent = table view cell with style <code>UITableViewCellStyleValue1</code>) and we do the selection by pushing a new, child view controller with a checkbox enabled <code>UITableView</code>.</p>

<p><img class="left" src="/images/posts_images/tableviewselection.png" width="618" height="569" title="Settings.app" > Such an implementation can be found in the stock Settings.app if we choose Sounds and if we take a look at the Ringtone right detail UITableViewCell. That is a combo box - like structure and selecting it brings a new, child view controller with selection logic.</p>

<br />    


<br />    


<br />     


<p>In such a scenario, what I like to do is set the parent's right detail <code>UITableViewCell</code> with the selected value from the child <code>UITableView</code> when the back button on the child view controller is pressed. That way I don't have to set the selected value on every selection user does in the child UITableView (at <code>tableView: didSelectRowAtIndexPath:</code> with a call to the delegate) so I only do the setting once, at the end. I was having trouble finding the <em>right &amp; correct</em> place to put the delegate call that sets the selected value on the parent and finally after some thinking around, I ended up with this awesome spot to put your back button action call.</p>

<p>```objc Where to put your back button action method call
- (void)viewWillDisappear:(BOOL)animated
{</p>

<pre><code>if ([self.navigationController.viewControllers indexOfObject:self] == NSNotFound) {
    [self.delegate setParentSelectedCity:self.selectedCity];
}
[super viewWillDisappear:animated];
</code></pre>

<p>}
```</p>

<p>This code should be put in the child view controller and it <strong>ensures</strong> us that back button has been pressed because <code>self</code> is no longer in the <code>UINavigationController</code> stack. What I also have here is my <code>setParentSelectedCity:</code> delegate method that sets the parent's right detail <code>UITableViewCell</code>. <code>self.selectedCity</code> is a property that holds the selected value by the user.</p>

<hr />

<p>Of course, you can put whatever method call you want on that place.</p>

<p>Thanks for reading my post, I hope it may be of any help.</p>
]]></content>
  </entry>
  
</feed>
